name: build pipeline
on:
  push:
    branches:
    - main
  # Manually trigger from Actions tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.A_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S_KEY }}
  AWS_DEFAULT_REGION: "us-east-1"
  APPNAME: ${{ secrets.APPNAME }}
  ENVNAME: ${{ github.ref_name }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  StackName: ${{ secrets.APPNAME }}-${{ secrets.ENVNAME }}
  SOURCE_REPO: vipinable/classified-nexus-ui
  ARTIFACT_NAME: build-files 
  
jobs:
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: all
    defaults:
      run:
        shell: bash

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Check aws cli
        run: aws --version && aws sts get-caller-identity --query Account --output text
      - name: Prepare lambda layer
        run: mkdir -p layer/bin/python && pip install -r src/requirements.txt -t layer/bin/python
      - name: Download artifact from source repo
        run: |
            # Get the latest successful workflow run ID
            run_id=$(gh api repos/$SOURCE_REPO/actions/runs \
              --jq '.workflow_runs[] | select(.conclusion=="success") | .id' | head -1)

            # Get artifact ID
            #artifact_id=$(gh api repos/$SOURCE_REPO/actions/runs/$run_id/artifacts \
            #  --jq ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .id")

            # Download artifact
            #gh api -H "Accept: application/vnd.github+json" \
            #  repos/$SOURCE_REPO/actions/artifacts/$artifact_id/zip > artifact.zip

            #unzip -o artifact.zip -d dist && \
            #mv dist/index.html src/templates/index.j2

      - name: update npm package
        run: sudo npm install -g npm
      - name: install aws cdk package
        run: npm install -g aws-cdk && cdk --version
      - name: Check running versions
        run: echo "node:$(node --version), cdk:$(cdk --version), typescript:$(tsc --version)"
      - name: Create temp directories
        run: mkdir build
      - name: cdk init
        run: cd build && cdk init --language=typescript && rm -rf bin lib && cp -r ../bin .;cp -r ../lib .;cp -r ../src .
      - name: cdk synth
        run: cd build && cdk synth && cdk deploy --require-approval never